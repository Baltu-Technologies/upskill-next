'use client';

import { createContext, useContext, useEffect, useState, useCallback, ReactNode } from 'react';

// Conditional import with error handling
let authClient: any = null;
try {
  if (typeof window !== 'undefined') {
    // Only import on client side
    const authModule = require('@/auth-client');
    authClient = authModule.authClient;
  }
} catch (error) {
  console.warn('Auth client not available:', error);
}

interface User {
  id: string;
  email: string;
  name?: string;
  role?: string;
}

interface AuthContextType {
  user: User | null;
  loading: boolean;
  error: string | null;
  checkSession: () => Promise<void>;
  handleSignOut: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider = ({ children }: AuthProviderProps) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const checkSession = useCallback(async () => {
    if (!authClient) {
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      setError(null);
      const session = await authClient.getSession();
      
      if (session?.user) {
        setUser({
          id: session.user.id,
          email: session.user.email,
          name: session.user.name,
          role: session.user.role
        });
      } else {
        setUser(null);
      }
    } catch (err) {
      console.error('Session check failed:', err);
      setError('Failed to check authentication status');
      setUser(null);
    } finally {
      setLoading(false);
    }
  }, []);

  const handleSignOut = useCallback(async () => {
    if (!authClient) {
      return;
    }

    try {
      setError(null);
      await authClient.signOut({
        fetchOptions: {
          onSuccess: () => {
            setUser(null);
            window.location.href = '/';
          },
        },
      });
    } catch (err) {
      console.error('Sign out failed:', err);
      setError('Failed to sign out');
    }
  }, []);

  useEffect(() => {
    checkSession();
  }, [checkSession]);

  const value = {
    user,
    loading,
    error,
    checkSession,
    handleSignOut,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}; 