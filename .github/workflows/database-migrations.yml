name: Database Migrations

on:
  # Trigger on pushes to main that affect database files
  push:
    branches: [main, develop]
    paths:
      - 'migrations/**'
      - 'scripts/**'
      - 'amplify/backend.ts'
      - '.env.example'
      - 'package.json'
  
  # Manual trigger for emergency migrations
  workflow_dispatch:
    inputs:
      target_database:
        description: 'Target database (auth/course/both)'
        required: true
        default: 'both'
        type: choice
        options:
          - auth
          - course
          - both
      migration_action:
        description: 'Migration action to perform'
        required: true
        default: 'migrate'
        type: choice
        options:
          - migrate
          - validate
          - test-connection
          - rollback
      dry_run:
        description: 'Perform dry run (no actual changes)'
        required: false
        default: false
        type: boolean

env:
  # AWS Configuration
  AWS_REGION: us-west-2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
  # Database Connection Variables (from secrets)
  AUTH_DB_URL: ${{ secrets.AUTH_DB_URL }}
  COURSE_DB_URL: ${{ secrets.COURSE_DB_URL }}
  BETTER_AUTH_DATABASE_URL: ${{ secrets.BETTER_AUTH_DATABASE_URL }}
  
  # Migration Configuration
  NODE_ENV: production
  MIGRATION_TIMEOUT: 300000
  MIGRATION_LOCK_TIMEOUT: 600000

jobs:
  # Job 1: Pre-migration Validation
  validate-environment:
    name: Validate Environment & Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci
          chmod +x migrations/scripts/*.js
          chmod +x scripts/*.js

      - name: Validate Migration Scripts
        run: |
          echo "🔍 Validating migration scripts syntax..."
          npm run validate:db:json > validation-results.json
          
          # Check validation results
          if jq -e '.summary.failed > 0' validation-results.json > /dev/null; then
            echo "❌ Migration validation failed:"
            jq '.tests[] | select(.passed == false) | "\(.database) - \(.test): \(.message)"' validation-results.json
            exit 1
          else
            echo "✅ All migration scripts validated successfully"
            jq '.summary' validation-results.json
          fi

      - name: Upload Validation Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: migration-validation-results
          path: validation-results.json
          retention-days: 30

  # Job 2: Test Database Connections
  test-connections:
    name: Test Database Connections
    runs-on: ubuntu-latest
    needs: validate-environment
    if: ${{ !failure() }}
    
    strategy:
      matrix:
        database: [auth, course]
        
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Test ${{ matrix.database }} Database Connection
        id: connection-test
        run: |
          echo "🔗 Testing ${{ matrix.database }} database connection..."
          
          # Test connection with retries
          npm run validate:db:${{ matrix.database }} --json > connection-results.json || true
          
          # Check if connection succeeded
          if jq -e '.tests[] | select(.test == "Database Connection" and .passed == true)' connection-results.json > /dev/null; then
            echo "✅ ${{ matrix.database }} database connection successful"
            CONNECTION_TIME=$(jq -r '.tests[] | select(.test == "Database Connection") | .message' connection-results.json)
            echo "connection-time=$CONNECTION_TIME" >> $GITHUB_OUTPUT
          else
            echo "❌ ${{ matrix.database }} database connection failed:"
            jq '.tests[] | select(.test == "Database Connection" and .passed == false) | .message' connection-results.json
            exit 1
          fi

      - name: Upload Connection Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: connection-test-${{ matrix.database }}
          path: connection-results.json
          retention-days: 7

  # Job 3: Execute Migrations
  run-migrations:
    name: Execute Database Migrations
    runs-on: ubuntu-latest
    needs: [validate-environment, test-connections]
    if: ${{ !failure() }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Determine Migration Target
        id: migration-target
        run: |
          # Determine which databases to migrate based on trigger
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "target=${{ github.event.inputs.target_database }}" >> $GITHUB_OUTPUT
            echo "action=${{ github.event.inputs.migration_action }}" >> $GITHUB_OUTPUT
            echo "dry_run=${{ github.event.inputs.dry_run }}" >> $GITHUB_OUTPUT
          else
            echo "target=both" >> $GITHUB_OUTPUT
            echo "action=migrate" >> $GITHUB_OUTPUT
            echo "dry_run=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Auth Database Migration
        if: ${{ steps.migration-target.outputs.target == 'auth' || steps.migration-target.outputs.target == 'both' }}
        run: |
          echo "🚀 Running auth database migration..."
          
          DRY_RUN_FLAG=""
          if [[ "${{ steps.migration-target.outputs.dry_run }}" == "true" ]]; then
            DRY_RUN_FLAG="--dry-run"
            echo "🧪 Performing dry run (no actual changes)"
          fi
          
          case "${{ steps.migration-target.outputs.action }}" in
            "migrate")
              npm run migrate:auth $DRY_RUN_FLAG -- --verbose
              ;;
            "validate")
              npm run validate:db:auth --verbose
              ;;
            "test-connection")
              npm run validate:db:auth
              ;;
            "rollback")
              npm run rollback:auth $DRY_RUN_FLAG -- --steps=1 --verbose
              ;;
          esac

      - name: Run Course Database Migration
        if: ${{ steps.migration-target.outputs.target == 'course' || steps.migration-target.outputs.target == 'both' }}
        run: |
          echo "🚀 Running course database migration..."
          
          DRY_RUN_FLAG=""
          if [[ "${{ steps.migration-target.outputs.dry_run }}" == "true" ]]; then
            DRY_RUN_FLAG="--dry-run"
            echo "🧪 Performing dry run (no actual changes)"
          fi
          
          case "${{ steps.migration-target.outputs.action }}" in
            "migrate")
              npm run migrate:course $DRY_RUN_FLAG -- --verbose
              ;;
            "validate")
              npm run validate:db:course --verbose
              ;;
            "test-connection")
              npm run validate:db:course
              ;;
            "rollback")
              npm run rollback:course $DRY_RUN_FLAG -- --steps=1 --verbose
              ;;
          esac

      - name: Post-Migration Validation
        if: ${{ steps.migration-target.outputs.action == 'migrate' }}
        run: |
          echo "🔍 Validating post-migration state..."
          
          # Test both databases after migration
          npm run validate:db:json > post-migration-validation.json
          
          # Check validation results
          if jq -e '.tests[] | select(.test == "Database Connection" and .passed == false)' post-migration-validation.json > /dev/null; then
            echo "❌ Post-migration validation failed:"
            jq '.tests[] | select(.passed == false) | "\(.database) - \(.test): \(.message)"' post-migration-validation.json
            exit 1
          else
            echo "✅ Post-migration validation successful"
            jq '.summary' post-migration-validation.json
          fi

      - name: Upload Migration Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: migration-results-${{ github.run_number }}
          path: |
            post-migration-validation.json
            *.log
          retention-days: 90

  # Job 4: Deployment Integration (if migrations succeed)
  trigger-amplify-deployment:
    name: Trigger Amplify Deployment
    runs-on: ubuntu-latest
    needs: [run-migrations]
    if: ${{ !failure() && github.ref == 'refs/heads/main' }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Deploy Amplify Backend
        run: |
          echo "🚀 Deploying Amplify backend with updated database schema..."
          
          # Install Amplify CLI
          npm install -g @aws-amplify/cli@latest
          
          # Deploy backend (sandbox for non-main branches)
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "🏗️ Deploying to production..."
            npx @aws-amplify/backend-cli deploy --branch main
          else
            echo "🧪 Deploying to sandbox..."
            npx @aws-amplify/backend-cli sandbox --once
          fi

      - name: Test Application Build
        run: |
          echo "🔨 Testing application build after deployment..."
          npm run build

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "🎉 Database migrations and deployment completed successfully!"
          echo "📊 Migration Summary:"
          echo "- Branch: ${{ github.ref_name }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Databases: Updated and validated"
          echo "- Amplify: Deployed successfully"

  # Job 5: Cleanup and Notifications
  cleanup-and-notify:
    name: Cleanup and Notifications
    runs-on: ubuntu-latest
    needs: [validate-environment, test-connections, run-migrations, trigger-amplify-deployment]
    if: always()
    
    steps:
      - name: Generate Migration Report
        run: |
          echo "📋 Migration Pipeline Report" > migration-report.md
          echo "=========================" >> migration-report.md
          echo "" >> migration-report.md
          echo "**Branch**: ${{ github.ref_name }}" >> migration-report.md
          echo "**Commit**: ${{ github.sha }}" >> migration-report.md
          echo "**Triggered by**: ${{ github.event_name }}" >> migration-report.md
          echo "**Status**: ${{ job.status }}" >> migration-report.md
          echo "" >> migration-report.md
          
          # Job statuses
          echo "### Job Results:" >> migration-report.md
          echo "- ✅ Environment Validation: ${{ needs.validate-environment.result }}" >> migration-report.md
          echo "- ✅ Connection Tests: ${{ needs.test-connections.result }}" >> migration-report.md
          echo "- ✅ Migrations: ${{ needs.run-migrations.result }}" >> migration-report.md
          echo "- ✅ Deployment: ${{ needs.trigger-amplify-deployment.result }}" >> migration-report.md
          
          cat migration-report.md

      - name: Upload Final Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: migration-pipeline-report-${{ github.run_number }}
          path: migration-report.md
          retention-days: 90 