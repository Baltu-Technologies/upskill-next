name: Amplify Deployment

on:
  # Trigger on pushes to main and develop branches
  push:
    branches: [main, develop]
    # Exclude paths that only affect database migrations
    paths-ignore:
      - 'migrations/**'
      - 'scripts/connection-validator.js'
      - 'scripts/test-db.js'
      - '.github/workflows/database-migrations.yml'
  
  # Manual deployment trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'sandbox'
        type: choice
        options:
          - sandbox
          - production
      force_deploy:
        description: 'Force deployment even if migrations pending'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip test suite before deployment'
        required: false
        default: false
        type: boolean

env:
  # AWS Configuration
  AWS_REGION: us-west-2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
  # Amplify Configuration
  AMPLIFY_APP_ID: ${{ secrets.AMPLIFY_APP_ID }}
  
  # Database URLs for validation
  AUTH_DB_URL: ${{ secrets.AUTH_DB_URL }}
  COURSE_DB_URL: ${{ secrets.COURSE_DB_URL }}
  BETTER_AUTH_DATABASE_URL: ${{ secrets.BETTER_AUTH_DATABASE_URL }}

jobs:
  # Job 1: Pre-deployment Checks
  pre-deployment-checks:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    
    outputs:
      should-deploy: ${{ steps.deployment-decision.outputs.should-deploy }}
      deployment-env: ${{ steps.deployment-decision.outputs.deployment-env }}
      migration-status: ${{ steps.migration-check.outputs.status }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Check Database Migration Status
        id: migration-check
        run: |
          echo "🔍 Checking database migration status..."
          
          # Check if databases are accessible and up-to-date
          npm run validate:db:json > migration-status.json || true
          
          # Parse results
          AUTH_STATUS=$(jq -r '.databases.auth.status // "unknown"' migration-status.json)
          COURSE_STATUS=$(jq -r '.databases.course.status // "unknown"' migration-status.json)
          
          echo "Auth DB Status: $AUTH_STATUS"
          echo "Course DB Status: $COURSE_STATUS"
          
          if [[ "$AUTH_STATUS" == "connected" && "$COURSE_STATUS" == "connected" ]]; then
            echo "status=ready" >> $GITHUB_OUTPUT
            echo "✅ All databases are ready for deployment"
          else
            echo "status=pending" >> $GITHUB_OUTPUT
            echo "⚠️ Database migration status unclear"
          fi

      - name: Determine Deployment Environment
        id: deployment-decision
        run: |
          # Determine deployment environment based on trigger and branch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            DEPLOY_ENV="${{ github.event.inputs.environment }}"
            FORCE_DEPLOY="${{ github.event.inputs.force_deploy }}"
          else
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              DEPLOY_ENV="production"
            else
              DEPLOY_ENV="sandbox"
            fi
            FORCE_DEPLOY="false"
          fi
          
          echo "deployment-env=$DEPLOY_ENV" >> $GITHUB_OUTPUT
          
          # Decide if we should proceed with deployment
          MIGRATION_STATUS="${{ steps.migration-check.outputs.status }}"
          
          if [[ "$FORCE_DEPLOY" == "true" ]]; then
            echo "🚨 Force deployment enabled - proceeding despite migration status"
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "$MIGRATION_STATUS" == "ready" ]]; then
            echo "✅ Migrations ready - proceeding with deployment"
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "⏸️ Waiting for database migrations to complete"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Pre-deployment Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: pre-deployment-checks
          path: migration-status.json
          retention-days: 7

  # Job 2: Wait for Database Migrations (if needed)
  wait-for-migrations:
    name: Wait for Database Migrations
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: ${{ needs.pre-deployment-checks.outputs.should-deploy == 'false' }}
    
    steps:
      - name: Wait for Migration Workflow
        uses: fountainhead/action-wait-for-check@v1.1.0
        id: wait-for-migrations
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "Execute Database Migrations"
          ref: ${{ github.sha }}
          timeoutSeconds: 1800  # 30 minutes
          intervalSeconds: 60   # Check every minute

      - name: Check Migration Results
        if: steps.wait-for-migrations.outputs.conclusion == 'success'
        run: |
          echo "✅ Database migrations completed successfully"
          echo "🚀 Ready to proceed with Amplify deployment"

      - name: Handle Migration Failure
        if: steps.wait-for-migrations.outputs.conclusion != 'success'
        run: |
          echo "❌ Database migrations failed or timed out"
          echo "🛑 Aborting Amplify deployment"
          exit 1

  # Job 3: Run Tests (optional)
  run-tests:
    name: Run Test Suite
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, wait-for-migrations]
    if: ${{ (needs.pre-deployment-checks.outputs.should-deploy == 'true' || success()) && github.event.inputs.skip_tests != 'true' }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Type Check
        run: |
          echo "🔍 Running TypeScript type checking..."
          npx tsc --noEmit

      - name: Run Linting
        run: |
          echo "🧹 Running ESLint..."
          npm run lint

      - name: Run Unit Tests
        run: |
          echo "🧪 Running unit tests..."
          # Add test command when tests are implemented
          echo "No unit tests defined yet"

      - name: Build Application
        run: |
          echo "🔨 Testing application build..."
          npm run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: .next
          retention-days: 7

  # Job 4: Deploy to Amplify
  deploy-amplify:
    name: Deploy Amplify Backend & Frontend
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, wait-for-migrations, run-tests]
    if: ${{ !failure() && (needs.pre-deployment-checks.outputs.should-deploy == 'true' || success()) }}
    
    environment: ${{ needs.pre-deployment-checks.outputs.deployment-env }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Amplify CLI
        run: |
          npm install -g @aws-amplify/cli@latest
          echo "📦 Amplify CLI installed"

      - name: Deploy Backend Infrastructure
        id: backend-deploy
        run: |
          echo "🏗️ Deploying Amplify backend infrastructure..."
          
          DEPLOYMENT_ENV="${{ needs.pre-deployment-checks.outputs.deployment-env }}"
          
          if [[ "$DEPLOYMENT_ENV" == "production" ]]; then
            echo "🚀 Deploying to production branch..."
            npx @aws-amplify/backend-cli deploy --branch main
          else
            echo "🧪 Deploying to sandbox environment..."
            npx @aws-amplify/backend-cli sandbox --once
          fi
          
          echo "backend-deployed=true" >> $GITHUB_OUTPUT

      - name: Validate Backend Deployment
        if: steps.backend-deploy.outputs.backend-deployed == 'true'
        run: |
          echo "🔍 Validating backend deployment..."
          
          # Check if amplify_outputs.json was generated
          if [[ -f "amplify_outputs.json" ]]; then
            echo "✅ Backend configuration generated"
            
            # Validate critical outputs
            API_URL=$(jq -r '.data.url // "missing"' amplify_outputs.json)
            if [[ "$API_URL" != "missing" && "$API_URL" != "null" ]]; then
              echo "✅ GraphQL API endpoint configured: $API_URL"
            else
              echo "⚠️ GraphQL API endpoint not found in outputs"
            fi
          else
            echo "❌ Backend configuration file not generated"
            exit 1
          fi

      - name: Test Database Connectivity Post-Deployment
        run: |
          echo "🔗 Testing database connectivity after deployment..."
          
          # Test both databases with the deployed configuration
          npm run validate:db:json > post-deploy-validation.json
          
          # Check results
          if jq -e '.tests[] | select(.test == "Database Connection" and .passed == false)' post-deploy-validation.json > /dev/null; then
            echo "❌ Post-deployment database validation failed:"
            jq '.tests[] | select(.passed == false) | "\(.database) - \(.test): \(.message)"' post-deploy-validation.json
            echo "⚠️ Deployment succeeded but database connectivity issues detected"
          else
            echo "✅ Post-deployment database validation successful"
          fi

      - name: Upload Deployment Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: amplify-deployment-${{ needs.pre-deployment-checks.outputs.deployment-env }}
          path: |
            amplify_outputs.json
            post-deploy-validation.json
            .amplify/
          retention-days: 30

  # Job 5: Post-deployment Verification
  post-deployment-verification:
    name: Post-deployment Health Checks
    runs-on: ubuntu-latest
    needs: [deploy-amplify, pre-deployment-checks]
    if: ${{ !failure() }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Download Deployment Artifacts
        uses: actions/download-artifact@v3
        with:
          name: amplify-deployment-${{ needs.pre-deployment-checks.outputs.deployment-env }}

      - name: Perform Health Checks
        run: |
          echo "🩺 Performing post-deployment health checks..."
          
          # Test application build with deployed backend
          echo "🔨 Testing application build with deployed backend..."
          npm run build
          
          # Additional health checks can be added here
          # - API endpoint testing
          # - Database connectivity
          # - Authentication flow testing
          
          echo "✅ Health checks completed successfully"

      - name: Generate Deployment Summary
        run: |
          echo "📋 Deployment Summary" > deployment-summary.md
          echo "===================" >> deployment-summary.md
          echo "" >> deployment-summary.md
          echo "**Environment**: ${{ needs.pre-deployment-checks.outputs.deployment-env }}" >> deployment-summary.md
          echo "**Branch**: ${{ github.ref_name }}" >> deployment-summary.md
          echo "**Commit**: ${{ github.sha }}" >> deployment-summary.md
          echo "**Triggered by**: ${{ github.event_name }}" >> deployment-summary.md
          echo "" >> deployment-summary.md
          
          # Add API endpoint if available
          if [[ -f "amplify_outputs.json" ]]; then
            API_URL=$(jq -r '.data.url // "Not configured"' amplify_outputs.json)
            echo "**GraphQL API**: $API_URL" >> deployment-summary.md
          fi
          
          echo "" >> deployment-summary.md
          echo "### Deployment Steps Completed:" >> deployment-summary.md
          echo "- ✅ Pre-deployment validation" >> deployment-summary.md
          echo "- ✅ Database migration check" >> deployment-summary.md
          echo "- ✅ Test suite execution" >> deployment-summary.md
          echo "- ✅ Backend infrastructure deployment" >> deployment-summary.md
          echo "- ✅ Post-deployment verification" >> deployment-summary.md
          
          cat deployment-summary.md

      - name: Upload Deployment Summary
        uses: actions/upload-artifact@v3
        with:
          name: deployment-summary-${{ github.run_number }}
          path: deployment-summary.md
          retention-days: 90

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "🎉 Amplify deployment completed successfully!"
          echo "🌐 Environment: ${{ needs.pre-deployment-checks.outputs.deployment-env }}"
          echo "📦 Backend infrastructure deployed and validated"
          echo "🔗 Database connectivity confirmed"
          echo "✅ All health checks passed" 