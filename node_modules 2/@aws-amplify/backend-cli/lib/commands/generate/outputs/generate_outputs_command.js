import { ClientConfigFormat, ClientConfigVersionOption, DEFAULT_CLIENT_CONFIG_VERSION, } from '@aws-amplify/client-config';
/**
 * Command that generates client config aka amplify_outputs.
 */
export class GenerateOutputsCommand {
    clientConfigGenerator;
    backendIdentifierResolver;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates client config (amplify-outputs.json) generation command.
     */
    constructor(clientConfigGenerator, backendIdentifierResolver) {
        this.clientConfigGenerator = clientConfigGenerator;
        this.backendIdentifierResolver = backendIdentifierResolver;
        this.command = 'outputs';
        this.describe = 'Generates amplify outputs';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const backendIdentifier = await this.backendIdentifierResolver.resolve(args);
        if (!backendIdentifier) {
            throw new Error('Could not resolve the backend identifier');
        }
        await this.clientConfigGenerator.generateClientConfigToFile(backendIdentifier, args.configVersion, args.outDir, args.format);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .option('stack', {
            conflicts: ['app-id', 'branch'],
            describe: 'A stack name that contains an Amplify backend',
            type: 'string',
            array: false,
            group: 'Stack identifier',
        })
            .option('app-id', {
            conflicts: ['stack'],
            describe: 'The Amplify App ID of the project',
            type: 'string',
            array: false,
            implies: 'branch',
            group: 'Project identifier',
        })
            .option('branch', {
            conflicts: ['stack'],
            describe: 'A git branch of the Amplify project',
            type: 'string',
            array: false,
            group: 'Project identifier',
        })
            .option('format', {
            describe: 'The format which the configuration should be exported into.',
            type: 'string',
            array: false,
            choices: Object.values(ClientConfigFormat),
        })
            .option('out-dir', {
            describe: 'A path to directory where config is written. If not provided defaults to current process working directory.',
            type: 'string',
            array: false,
        })
            .option('config-version', {
            describe: 'Version of the configuration. Version 0 represents classic amplify-cli config file amplify-configuration and 1 represents newer config file amplify_outputs',
            type: 'string',
            array: false,
            choices: Object.values(ClientConfigVersionOption),
            default: DEFAULT_CLIENT_CONFIG_VERSION,
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfb3V0cHV0c19jb21tYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1hbmRzL2dlbmVyYXRlL291dHB1dHMvZ2VuZXJhdGVfb3V0cHV0c19jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxrQkFBa0IsRUFFbEIseUJBQXlCLEVBQ3pCLDZCQUE2QixHQUM5QixNQUFNLDRCQUE0QixDQUFDO0FBaUJwQzs7R0FFRztBQUNILE1BQU0sT0FBTyxzQkFBc0I7SUFpQmQ7SUFDQTtJQWZuQjs7T0FFRztJQUNNLE9BQU8sQ0FBUztJQUV6Qjs7T0FFRztJQUNNLFFBQVEsQ0FBUztJQUUxQjs7T0FFRztJQUNILFlBQ21CLHFCQUFtRCxFQUNuRCx5QkFBb0Q7UUFEcEQsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUE4QjtRQUNuRCw4QkFBeUIsR0FBekIseUJBQXlCLENBQTJCO1FBRXJFLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsMkJBQTJCLENBQUM7SUFDOUMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTyxHQUFHLEtBQUssRUFDYixJQUF1RCxFQUN4QyxFQUFFO1FBQ2pCLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxJQUFJLENBQUMseUJBQXlCLENBQUMsT0FBTyxDQUNwRSxJQUFJLENBQ0wsQ0FBQztRQUVGLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7U0FDN0Q7UUFFRCxNQUFNLElBQUksQ0FBQyxxQkFBcUIsQ0FBQywwQkFBMEIsQ0FDekQsaUJBQWlCLEVBQ2pCLElBQUksQ0FBQyxhQUFvQyxFQUN6QyxJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxNQUFNLENBQ1osQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsT0FBTyxHQUFHLENBQUMsS0FBVyxFQUF1QyxFQUFFO1FBQzdELE9BQU8sS0FBSzthQUNULE1BQU0sQ0FBQyxPQUFPLEVBQUU7WUFDZixTQUFTLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO1lBQy9CLFFBQVEsRUFBRSwrQ0FBK0M7WUFDekQsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztZQUNaLEtBQUssRUFBRSxrQkFBa0I7U0FDMUIsQ0FBQzthQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDaEIsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ3BCLFFBQVEsRUFBRSxtQ0FBbUM7WUFDN0MsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztZQUNaLE9BQU8sRUFBRSxRQUFRO1lBQ2pCLEtBQUssRUFBRSxvQkFBb0I7U0FDNUIsQ0FBQzthQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDaEIsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ3BCLFFBQVEsRUFBRSxxQ0FBcUM7WUFDL0MsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztZQUNaLEtBQUssRUFBRSxvQkFBb0I7U0FDNUIsQ0FBQzthQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDaEIsUUFBUSxFQUFFLDZEQUE2RDtZQUN2RSxJQUFJLEVBQUUsUUFBUTtZQUNkLEtBQUssRUFBRSxLQUFLO1lBQ1osT0FBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUM7U0FDM0MsQ0FBQzthQUNELE1BQU0sQ0FBQyxTQUFTLEVBQUU7WUFDakIsUUFBUSxFQUNOLDZHQUE2RztZQUMvRyxJQUFJLEVBQUUsUUFBUTtZQUNkLEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FBQzthQUNELE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRTtZQUN4QixRQUFRLEVBQ04sNkpBQTZKO1lBQy9KLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLEtBQUs7WUFDWixPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQztZQUNqRCxPQUFPLEVBQUUsNkJBQTZCO1NBQ3ZDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJndW1lbnRzQ2FtZWxDYXNlLCBBcmd2LCBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHtcbiAgQ2xpZW50Q29uZmlnRm9ybWF0LFxuICBDbGllbnRDb25maWdWZXJzaW9uLFxuICBDbGllbnRDb25maWdWZXJzaW9uT3B0aW9uLFxuICBERUZBVUxUX0NMSUVOVF9DT05GSUdfVkVSU0lPTixcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaWVudC1jb25maWcnO1xuaW1wb3J0IHsgQmFja2VuZElkZW50aWZpZXJSZXNvbHZlciB9IGZyb20gJy4uLy4uLy4uL2JhY2tlbmQtaWRlbnRpZmllci9iYWNrZW5kX2lkZW50aWZpZXJfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlciB9IGZyb20gJy4uLy4uLy4uL2NsaWVudC1jb25maWcvY2xpZW50X2NvbmZpZ19nZW5lcmF0b3JfYWRhcHRlci5qcyc7XG5pbXBvcnQgeyBBcmd1bWVudHNLZWJhYkNhc2UgfSBmcm9tICcuLi8uLi8uLi9rZWJhYl9jYXNlLmpzJztcblxuZXhwb3J0IHR5cGUgR2VuZXJhdGVPdXRwdXRzQ29tbWFuZE9wdGlvbnMgPVxuICBBcmd1bWVudHNLZWJhYkNhc2U8R2VuZXJhdGVPdXRwdXRzQ29tbWFuZE9wdGlvbnNDYW1lbENhc2U+O1xuXG50eXBlIEdlbmVyYXRlT3V0cHV0c0NvbW1hbmRPcHRpb25zQ2FtZWxDYXNlID0ge1xuICBzdGFjazogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBhcHBJZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBicmFuY2g6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgZm9ybWF0OiBDbGllbnRDb25maWdGb3JtYXQgfCB1bmRlZmluZWQ7XG4gIG91dERpcjogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBjb25maWdWZXJzaW9uOiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIENvbW1hbmQgdGhhdCBnZW5lcmF0ZXMgY2xpZW50IGNvbmZpZyBha2EgYW1wbGlmeV9vdXRwdXRzLlxuICovXG5leHBvcnQgY2xhc3MgR2VuZXJhdGVPdXRwdXRzQ29tbWFuZFxuICBpbXBsZW1lbnRzIENvbW1hbmRNb2R1bGU8b2JqZWN0LCBHZW5lcmF0ZU91dHB1dHNDb21tYW5kT3B0aW9ucz5cbntcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBjb21tYW5kOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBkZXNjcmliZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGNsaWVudCBjb25maWcgKGFtcGxpZnktb3V0cHV0cy5qc29uKSBnZW5lcmF0aW9uIGNvbW1hbmQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNsaWVudENvbmZpZ0dlbmVyYXRvcjogQ2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGJhY2tlbmRJZGVudGlmaWVyUmVzb2x2ZXI6IEJhY2tlbmRJZGVudGlmaWVyUmVzb2x2ZXJcbiAgKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ291dHB1dHMnO1xuICAgIHRoaXMuZGVzY3JpYmUgPSAnR2VuZXJhdGVzIGFtcGxpZnkgb3V0cHV0cyc7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGhhbmRsZXIgPSBhc3luYyAoXG4gICAgYXJnczogQXJndW1lbnRzQ2FtZWxDYXNlPEdlbmVyYXRlT3V0cHV0c0NvbW1hbmRPcHRpb25zPlxuICApOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCBiYWNrZW5kSWRlbnRpZmllciA9IGF3YWl0IHRoaXMuYmFja2VuZElkZW50aWZpZXJSZXNvbHZlci5yZXNvbHZlKFxuICAgICAgYXJnc1xuICAgICk7XG5cbiAgICBpZiAoIWJhY2tlbmRJZGVudGlmaWVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCByZXNvbHZlIHRoZSBiYWNrZW5kIGlkZW50aWZpZXInKTtcbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLmNsaWVudENvbmZpZ0dlbmVyYXRvci5nZW5lcmF0ZUNsaWVudENvbmZpZ1RvRmlsZShcbiAgICAgIGJhY2tlbmRJZGVudGlmaWVyLFxuICAgICAgYXJncy5jb25maWdWZXJzaW9uIGFzIENsaWVudENvbmZpZ1ZlcnNpb24sXG4gICAgICBhcmdzLm91dERpcixcbiAgICAgIGFyZ3MuZm9ybWF0XG4gICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGJ1aWxkZXIgPSAoeWFyZ3M6IEFyZ3YpOiBBcmd2PEdlbmVyYXRlT3V0cHV0c0NvbW1hbmRPcHRpb25zPiA9PiB7XG4gICAgcmV0dXJuIHlhcmdzXG4gICAgICAub3B0aW9uKCdzdGFjaycsIHtcbiAgICAgICAgY29uZmxpY3RzOiBbJ2FwcC1pZCcsICdicmFuY2gnXSxcbiAgICAgICAgZGVzY3JpYmU6ICdBIHN0YWNrIG5hbWUgdGhhdCBjb250YWlucyBhbiBBbXBsaWZ5IGJhY2tlbmQnLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgICBncm91cDogJ1N0YWNrIGlkZW50aWZpZXInLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oJ2FwcC1pZCcsIHtcbiAgICAgICAgY29uZmxpY3RzOiBbJ3N0YWNrJ10sXG4gICAgICAgIGRlc2NyaWJlOiAnVGhlIEFtcGxpZnkgQXBwIElEIG9mIHRoZSBwcm9qZWN0JyxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGFycmF5OiBmYWxzZSxcbiAgICAgICAgaW1wbGllczogJ2JyYW5jaCcsXG4gICAgICAgIGdyb3VwOiAnUHJvamVjdCBpZGVudGlmaWVyJyxcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKCdicmFuY2gnLCB7XG4gICAgICAgIGNvbmZsaWN0czogWydzdGFjayddLFxuICAgICAgICBkZXNjcmliZTogJ0EgZ2l0IGJyYW5jaCBvZiB0aGUgQW1wbGlmeSBwcm9qZWN0JyxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGFycmF5OiBmYWxzZSxcbiAgICAgICAgZ3JvdXA6ICdQcm9qZWN0IGlkZW50aWZpZXInLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oJ2Zvcm1hdCcsIHtcbiAgICAgICAgZGVzY3JpYmU6ICdUaGUgZm9ybWF0IHdoaWNoIHRoZSBjb25maWd1cmF0aW9uIHNob3VsZCBiZSBleHBvcnRlZCBpbnRvLicsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICAgIGNob2ljZXM6IE9iamVjdC52YWx1ZXMoQ2xpZW50Q29uZmlnRm9ybWF0KSxcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKCdvdXQtZGlyJywge1xuICAgICAgICBkZXNjcmliZTpcbiAgICAgICAgICAnQSBwYXRoIHRvIGRpcmVjdG9yeSB3aGVyZSBjb25maWcgaXMgd3JpdHRlbi4gSWYgbm90IHByb3ZpZGVkIGRlZmF1bHRzIHRvIGN1cnJlbnQgcHJvY2VzcyB3b3JraW5nIGRpcmVjdG9yeS4nLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oJ2NvbmZpZy12ZXJzaW9uJywge1xuICAgICAgICBkZXNjcmliZTpcbiAgICAgICAgICAnVmVyc2lvbiBvZiB0aGUgY29uZmlndXJhdGlvbi4gVmVyc2lvbiAwIHJlcHJlc2VudHMgY2xhc3NpYyBhbXBsaWZ5LWNsaSBjb25maWcgZmlsZSBhbXBsaWZ5LWNvbmZpZ3VyYXRpb24gYW5kIDEgcmVwcmVzZW50cyBuZXdlciBjb25maWcgZmlsZSBhbXBsaWZ5X291dHB1dHMnLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgICBjaG9pY2VzOiBPYmplY3QudmFsdWVzKENsaWVudENvbmZpZ1ZlcnNpb25PcHRpb24pLFxuICAgICAgICBkZWZhdWx0OiBERUZBVUxUX0NMSUVOVF9DT05GSUdfVkVSU0lPTixcbiAgICAgIH0pO1xuICB9O1xufVxuIl19