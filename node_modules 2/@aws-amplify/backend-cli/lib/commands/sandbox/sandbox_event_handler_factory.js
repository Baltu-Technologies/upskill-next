import { AmplifyError } from '@aws-amplify/platform-core';
import { format, printer } from '@aws-amplify/cli-core';
/**
 * Coordinates creation of sandbox event handlers
 */
export class SandboxEventHandlerFactory {
    getBackendIdentifier;
    getUsageDataEmitter;
    /**
     * Creates a SandboxEventHandlerFactory
     */
    constructor(getBackendIdentifier, getUsageDataEmitter) {
        this.getBackendIdentifier = getBackendIdentifier;
        this.getUsageDataEmitter = getUsageDataEmitter;
    }
    getSandboxEventHandlers = ({ sandboxIdentifier: sandboxIdentifier, clientConfigLifecycleHandler, }) => {
        return {
            successfulDeployment: [
                async (...args) => {
                    const backendIdentifier = await this.getBackendIdentifier(sandboxIdentifier);
                    const usageDataEmitter = await this.getUsageDataEmitter();
                    try {
                        await clientConfigLifecycleHandler.generateClientConfigFile(backendIdentifier);
                        if (args && args[0]) {
                            const deployResult = args[0];
                            if (deployResult && deployResult.deploymentTimes) {
                                await usageDataEmitter.emitSuccess(deployResult.deploymentTimes, { command: 'Sandbox' });
                            }
                        }
                    }
                    catch (error) {
                        // Don't crash sandbox if config cannot be generated, but print the error message
                        printer.print(format.error('Amplify configuration could not be generated.'));
                        if (error instanceof Error) {
                            printer.print(format.error(error.message));
                        }
                        else {
                            try {
                                printer.print(format.error(JSON.stringify(error, null, 2)));
                            }
                            catch {
                                // fallback in case there's an error stringify the error
                                // like with circular references.
                                printer.print(format.error('Unknown error'));
                            }
                        }
                    }
                },
            ],
            successfulDeletion: [
                async () => {
                    await clientConfigLifecycleHandler.deleteClientConfigFile();
                },
            ],
            failedDeployment: [
                async (...args) => {
                    const usageDataEmitter = await this.getUsageDataEmitter();
                    if (args.length == 0 || !args[0]) {
                        return;
                    }
                    const deployError = args[0];
                    if (deployError && deployError instanceof AmplifyError) {
                        await usageDataEmitter.emitFailure(deployError, {
                            command: 'Sandbox',
                        });
                    }
                    else {
                        await usageDataEmitter.emitFailure(AmplifyError.fromError(deployError), {
                            command: 'Sandbox',
                        });
                    }
                },
            ],
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9ldmVudF9oYW5kbGVyX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94X2V2ZW50X2hhbmRsZXJfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsWUFBWSxFQUFvQixNQUFNLDRCQUE0QixDQUFDO0FBRTVFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFeEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMEJBQTBCO0lBS2xCO0lBR0E7SUFQbkI7O09BRUc7SUFDSCxZQUNtQixvQkFFYyxFQUNkLG1CQUFvRDtRQUhwRCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBRU47UUFDZCx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQWlDO0lBQ3BFLENBQUM7SUFFSix1QkFBdUIsR0FBK0IsQ0FBQyxFQUNyRCxpQkFBaUIsRUFBRSxpQkFBaUIsRUFDcEMsNEJBQTRCLEdBQzdCLEVBQUUsRUFBRTtRQUNILE9BQU87WUFDTCxvQkFBb0IsRUFBRTtnQkFDcEIsS0FBSyxFQUFFLEdBQUcsSUFBZSxFQUFFLEVBQUU7b0JBQzNCLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxJQUFJLENBQUMsb0JBQW9CLENBQ3ZELGlCQUFpQixDQUNsQixDQUFDO29CQUNGLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztvQkFDMUQsSUFBSTt3QkFDRixNQUFNLDRCQUE0QixDQUFDLHdCQUF3QixDQUN6RCxpQkFBaUIsQ0FDbEIsQ0FBQzt3QkFDRixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7NEJBQ25CLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQWlCLENBQUM7NEJBQzdDLElBQUksWUFBWSxJQUFJLFlBQVksQ0FBQyxlQUFlLEVBQUU7Z0NBQ2hELE1BQU0sZ0JBQWdCLENBQUMsV0FBVyxDQUNoQyxZQUFZLENBQUMsZUFBZSxFQUM1QixFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FDdkIsQ0FBQzs2QkFDSDt5QkFDRjtxQkFDRjtvQkFBQyxPQUFPLEtBQUssRUFBRTt3QkFDZCxpRkFBaUY7d0JBQ2pGLE9BQU8sQ0FBQyxLQUFLLENBQ1gsTUFBTSxDQUFDLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUM5RCxDQUFDO3dCQUNGLElBQUksS0FBSyxZQUFZLEtBQUssRUFBRTs0QkFDMUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO3lCQUM1Qzs2QkFBTTs0QkFDTCxJQUFJO2dDQUNGLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOzZCQUM3RDs0QkFBQyxNQUFNO2dDQUNOLHdEQUF3RDtnQ0FDeEQsaUNBQWlDO2dDQUNqQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQzs2QkFDOUM7eUJBQ0Y7cUJBQ0Y7Z0JBQ0gsQ0FBQzthQUNGO1lBQ0Qsa0JBQWtCLEVBQUU7Z0JBQ2xCLEtBQUssSUFBSSxFQUFFO29CQUNULE1BQU0sNEJBQTRCLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztnQkFDOUQsQ0FBQzthQUNGO1lBQ0QsZ0JBQWdCLEVBQUU7Z0JBQ2hCLEtBQUssRUFBRSxHQUFHLElBQWUsRUFBRSxFQUFFO29CQUMzQixNQUFNLGdCQUFnQixHQUFHLE1BQU0sSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7b0JBQzFELElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7d0JBQ2hDLE9BQU87cUJBQ1I7b0JBQ0QsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM1QixJQUFJLFdBQVcsSUFBSSxXQUFXLFlBQVksWUFBWSxFQUFFO3dCQUN0RCxNQUFNLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUU7NEJBQzlDLE9BQU8sRUFBRSxTQUFTO3lCQUNuQixDQUFDLENBQUM7cUJBQ0o7eUJBQU07d0JBQ0wsTUFBTSxnQkFBZ0IsQ0FBQyxXQUFXLENBQ2hDLFlBQVksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQ25DOzRCQUNFLE9BQU8sRUFBRSxTQUFTO3lCQUNuQixDQUNGLENBQUM7cUJBQ0g7Z0JBQ0gsQ0FBQzthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2FuZGJveEV2ZW50SGFuZGxlckNyZWF0b3IgfSBmcm9tICcuL3NhbmRib3hfY29tbWFuZC5qcyc7XG5pbXBvcnQgeyBCYWNrZW5kSWRlbnRpZmllciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgQW1wbGlmeUVycm9yLCBVc2FnZURhdGFFbWl0dGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuaW1wb3J0IHsgRGVwbG95UmVzdWx0IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtZGVwbG95ZXInO1xuaW1wb3J0IHsgZm9ybWF0LCBwcmludGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcblxuLyoqXG4gKiBDb29yZGluYXRlcyBjcmVhdGlvbiBvZiBzYW5kYm94IGV2ZW50IGhhbmRsZXJzXG4gKi9cbmV4cG9ydCBjbGFzcyBTYW5kYm94RXZlbnRIYW5kbGVyRmFjdG9yeSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgU2FuZGJveEV2ZW50SGFuZGxlckZhY3RvcnlcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2V0QmFja2VuZElkZW50aWZpZXI6IChcbiAgICAgIHNhbmRib3hJZGVudGlmaWVyPzogc3RyaW5nXG4gICAgKSA9PiBQcm9taXNlPEJhY2tlbmRJZGVudGlmaWVyPixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGdldFVzYWdlRGF0YUVtaXR0ZXI6ICgpID0+IFByb21pc2U8VXNhZ2VEYXRhRW1pdHRlcj5cbiAgKSB7fVxuXG4gIGdldFNhbmRib3hFdmVudEhhbmRsZXJzOiBTYW5kYm94RXZlbnRIYW5kbGVyQ3JlYXRvciA9ICh7XG4gICAgc2FuZGJveElkZW50aWZpZXI6IHNhbmRib3hJZGVudGlmaWVyLFxuICAgIGNsaWVudENvbmZpZ0xpZmVjeWNsZUhhbmRsZXIsXG4gIH0pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2Vzc2Z1bERlcGxveW1lbnQ6IFtcbiAgICAgICAgYXN5bmMgKC4uLmFyZ3M6IHVua25vd25bXSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGJhY2tlbmRJZGVudGlmaWVyID0gYXdhaXQgdGhpcy5nZXRCYWNrZW5kSWRlbnRpZmllcihcbiAgICAgICAgICAgIHNhbmRib3hJZGVudGlmaWVyXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCB1c2FnZURhdGFFbWl0dGVyID0gYXdhaXQgdGhpcy5nZXRVc2FnZURhdGFFbWl0dGVyKCk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IGNsaWVudENvbmZpZ0xpZmVjeWNsZUhhbmRsZXIuZ2VuZXJhdGVDbGllbnRDb25maWdGaWxlKFxuICAgICAgICAgICAgICBiYWNrZW5kSWRlbnRpZmllclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChhcmdzICYmIGFyZ3NbMF0pIHtcbiAgICAgICAgICAgICAgY29uc3QgZGVwbG95UmVzdWx0ID0gYXJnc1swXSBhcyBEZXBsb3lSZXN1bHQ7XG4gICAgICAgICAgICAgIGlmIChkZXBsb3lSZXN1bHQgJiYgZGVwbG95UmVzdWx0LmRlcGxveW1lbnRUaW1lcykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHVzYWdlRGF0YUVtaXR0ZXIuZW1pdFN1Y2Nlc3MoXG4gICAgICAgICAgICAgICAgICBkZXBsb3lSZXN1bHQuZGVwbG95bWVudFRpbWVzLFxuICAgICAgICAgICAgICAgICAgeyBjb21tYW5kOiAnU2FuZGJveCcgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gRG9uJ3QgY3Jhc2ggc2FuZGJveCBpZiBjb25maWcgY2Fubm90IGJlIGdlbmVyYXRlZCwgYnV0IHByaW50IHRoZSBlcnJvciBtZXNzYWdlXG4gICAgICAgICAgICBwcmludGVyLnByaW50KFxuICAgICAgICAgICAgICBmb3JtYXQuZXJyb3IoJ0FtcGxpZnkgY29uZmlndXJhdGlvbiBjb3VsZCBub3QgYmUgZ2VuZXJhdGVkLicpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgcHJpbnRlci5wcmludChmb3JtYXQuZXJyb3IoZXJyb3IubWVzc2FnZSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwcmludGVyLnByaW50KGZvcm1hdC5lcnJvcihKU09OLnN0cmluZ2lmeShlcnJvciwgbnVsbCwgMikpKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgLy8gZmFsbGJhY2sgaW4gY2FzZSB0aGVyZSdzIGFuIGVycm9yIHN0cmluZ2lmeSB0aGUgZXJyb3JcbiAgICAgICAgICAgICAgICAvLyBsaWtlIHdpdGggY2lyY3VsYXIgcmVmZXJlbmNlcy5cbiAgICAgICAgICAgICAgICBwcmludGVyLnByaW50KGZvcm1hdC5lcnJvcignVW5rbm93biBlcnJvcicpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBzdWNjZXNzZnVsRGVsZXRpb246IFtcbiAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGF3YWl0IGNsaWVudENvbmZpZ0xpZmVjeWNsZUhhbmRsZXIuZGVsZXRlQ2xpZW50Q29uZmlnRmlsZSgpO1xuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIGZhaWxlZERlcGxveW1lbnQ6IFtcbiAgICAgICAgYXN5bmMgKC4uLmFyZ3M6IHVua25vd25bXSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHVzYWdlRGF0YUVtaXR0ZXIgPSBhd2FpdCB0aGlzLmdldFVzYWdlRGF0YUVtaXR0ZXIoKTtcbiAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPT0gMCB8fCAhYXJnc1swXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBkZXBsb3lFcnJvciA9IGFyZ3NbMF07XG4gICAgICAgICAgaWYgKGRlcGxveUVycm9yICYmIGRlcGxveUVycm9yIGluc3RhbmNlb2YgQW1wbGlmeUVycm9yKSB7XG4gICAgICAgICAgICBhd2FpdCB1c2FnZURhdGFFbWl0dGVyLmVtaXRGYWlsdXJlKGRlcGxveUVycm9yLCB7XG4gICAgICAgICAgICAgIGNvbW1hbmQ6ICdTYW5kYm94JyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCB1c2FnZURhdGFFbWl0dGVyLmVtaXRGYWlsdXJlKFxuICAgICAgICAgICAgICBBbXBsaWZ5RXJyb3IuZnJvbUVycm9yKGRlcGxveUVycm9yKSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbW1hbmQ6ICdTYW5kYm94JyxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH07XG59XG4iXX0=