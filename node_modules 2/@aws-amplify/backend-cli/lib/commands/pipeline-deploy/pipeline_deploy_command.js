import _isCI from 'is-ci';
import { ClientConfigVersionOption, DEFAULT_CLIENT_CONFIG_VERSION, } from '@aws-amplify/client-config';
/**
 * An entry point for deploy command.
 */
export class PipelineDeployCommand {
    clientConfigGenerator;
    backendDeployer;
    isCiEnvironment;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates top level entry point for deploy command.
     */
    constructor(clientConfigGenerator, backendDeployer, isCiEnvironment = _isCI) {
        this.clientConfigGenerator = clientConfigGenerator;
        this.backendDeployer = backendDeployer;
        this.isCiEnvironment = isCiEnvironment;
        this.command = 'pipeline-deploy';
        this.describe =
            'Command to deploy backends in a custom CI/CD pipeline. This command is not intended to be used locally.';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        if (!this.isCiEnvironment) {
            throw new Error('It looks like this command is being run outside of a CI/CD workflow. To deploy locally use `amplify sandbox` instead.');
        }
        const backendId = {
            namespace: args.appId,
            name: args.branch,
            type: 'branch',
        };
        await this.backendDeployer.deploy(backendId, {
            validateAppSources: true,
        });
        await this.clientConfigGenerator.generateClientConfigToFile(backendId, args.configVersion, args.configOutDir);
    };
    builder = (yargs) => {
        return yargs
            .version(false)
            .option('branch', {
            describe: 'Name of the git branch being deployed',
            demandOption: true,
            type: 'string',
            array: false,
        })
            .option('app-id', {
            describe: 'The app id of the target Amplify app',
            demandOption: true,
            type: 'string',
            array: false,
        })
            .option('config-out-dir', {
            describe: 'A path to directory where config is written. If not provided defaults to current process working directory.',
            type: 'string',
            array: false,
        })
            .option('config-version', {
            describe: 'Version of the client config. Version 0 represents classic amplify-cli client config (Default)',
            type: 'string',
            array: false,
            choices: Object.values(ClientConfigVersionOption),
            default: DEFAULT_CLIENT_CONFIG_VERSION,
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmVfZGVwbG95X2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvcGlwZWxpbmUtZGVwbG95L3BpcGVsaW5lX2RlcGxveV9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQU0xQixPQUFPLEVBRUwseUJBQXlCLEVBQ3pCLDZCQUE2QixHQUM5QixNQUFNLDRCQUE0QixDQUFDO0FBWXBDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQWlCYjtJQUNBO0lBQ0E7SUFoQm5COztPQUVHO0lBQ00sT0FBTyxDQUFTO0lBRXpCOztPQUVHO0lBQ00sUUFBUSxDQUFTO0lBRTFCOztPQUVHO0lBQ0gsWUFDbUIscUJBQW1ELEVBQ25ELGVBQWdDLEVBQ2hDLGtCQUFnQyxLQUFLO1FBRnJDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBOEI7UUFDbkQsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBQ2hDLG9CQUFlLEdBQWYsZUFBZSxDQUFzQjtRQUV0RCxJQUFJLENBQUMsT0FBTyxHQUFHLGlCQUFpQixDQUFDO1FBQ2pDLElBQUksQ0FBQyxRQUFRO1lBQ1gseUdBQXlHLENBQUM7SUFDOUcsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTyxHQUFHLEtBQUssRUFDYixJQUFzRCxFQUN2QyxFQUFFO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQ2IsdUhBQXVILENBQ3hILENBQUM7U0FDSDtRQUVELE1BQU0sU0FBUyxHQUFzQjtZQUNuQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDckIsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ2pCLElBQUksRUFBRSxRQUFRO1NBQ2YsQ0FBQztRQUNGLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO1lBQzNDLGtCQUFrQixFQUFFLElBQUk7U0FDekIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxJQUFJLENBQUMscUJBQXFCLENBQUMsMEJBQTBCLENBQ3pELFNBQVMsRUFDVCxJQUFJLENBQUMsYUFBb0MsRUFDekMsSUFBSSxDQUFDLFlBQVksQ0FDbEIsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGLE9BQU8sR0FBRyxDQUFDLEtBQVcsRUFBc0MsRUFBRTtRQUM1RCxPQUFPLEtBQUs7YUFDVCxPQUFPLENBQUMsS0FBSyxDQUFDO2FBQ2QsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUNoQixRQUFRLEVBQUUsdUNBQXVDO1lBQ2pELFlBQVksRUFBRSxJQUFJO1lBQ2xCLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLEtBQUs7U0FDYixDQUFDO2FBQ0QsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUNoQixRQUFRLEVBQUUsc0NBQXNDO1lBQ2hELFlBQVksRUFBRSxJQUFJO1lBQ2xCLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLEtBQUs7U0FDYixDQUFDO2FBQ0QsTUFBTSxDQUFDLGdCQUFnQixFQUFFO1lBQ3hCLFFBQVEsRUFDTiw2R0FBNkc7WUFDL0csSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztTQUNiLENBQUM7YUFDRCxNQUFNLENBQUMsZ0JBQWdCLEVBQUU7WUFDeEIsUUFBUSxFQUNOLGdHQUFnRztZQUNsRyxJQUFJLEVBQUUsUUFBUTtZQUNkLEtBQUssRUFBRSxLQUFLO1lBQ1osT0FBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMseUJBQXlCLENBQUM7WUFDakQsT0FBTyxFQUFFLDZCQUE2QjtTQUN2QyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfaXNDSSBmcm9tICdpcy1jaSc7XG5pbXBvcnQgeyBBcmd1bWVudHNDYW1lbENhc2UsIEFyZ3YsIENvbW1hbmRNb2R1bGUgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBCYWNrZW5kRGVwbG95ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1kZXBsb3llcic7XG5pbXBvcnQgeyBDbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyIH0gZnJvbSAnLi4vLi4vY2xpZW50LWNvbmZpZy9jbGllbnRfY29uZmlnX2dlbmVyYXRvcl9hZGFwdGVyLmpzJztcbmltcG9ydCB7IEFyZ3VtZW50c0tlYmFiQ2FzZSB9IGZyb20gJy4uLy4uL2tlYmFiX2Nhc2UuanMnO1xuaW1wb3J0IHsgQmFja2VuZElkZW50aWZpZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7XG4gIENsaWVudENvbmZpZ1ZlcnNpb24sXG4gIENsaWVudENvbmZpZ1ZlcnNpb25PcHRpb24sXG4gIERFRkFVTFRfQ0xJRU5UX0NPTkZJR19WRVJTSU9OLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpZW50LWNvbmZpZyc7XG5cbmV4cG9ydCB0eXBlIFBpcGVsaW5lRGVwbG95Q29tbWFuZE9wdGlvbnMgPVxuICBBcmd1bWVudHNLZWJhYkNhc2U8UGlwZWxpbmVEZXBsb3lDb21tYW5kT3B0aW9uc0NhbWVsQ2FzZT47XG5cbnR5cGUgUGlwZWxpbmVEZXBsb3lDb21tYW5kT3B0aW9uc0NhbWVsQ2FzZSA9IHtcbiAgYnJhbmNoOiBzdHJpbmc7XG4gIGFwcElkOiBzdHJpbmc7XG4gIGNvbmZpZ1ZlcnNpb246IHN0cmluZztcbiAgY29uZmlnT3V0RGlyPzogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBBbiBlbnRyeSBwb2ludCBmb3IgZGVwbG95IGNvbW1hbmQuXG4gKi9cbmV4cG9ydCBjbGFzcyBQaXBlbGluZURlcGxveUNvbW1hbmRcbiAgaW1wbGVtZW50cyBDb21tYW5kTW9kdWxlPG9iamVjdCwgUGlwZWxpbmVEZXBsb3lDb21tYW5kT3B0aW9ucz5cbntcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBjb21tYW5kOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBkZXNjcmliZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRvcCBsZXZlbCBlbnRyeSBwb2ludCBmb3IgZGVwbG95IGNvbW1hbmQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNsaWVudENvbmZpZ0dlbmVyYXRvcjogQ2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGJhY2tlbmREZXBsb3llcjogQmFja2VuZERlcGxveWVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgaXNDaUVudmlyb25tZW50OiB0eXBlb2YgX2lzQ0kgPSBfaXNDSVxuICApIHtcbiAgICB0aGlzLmNvbW1hbmQgPSAncGlwZWxpbmUtZGVwbG95JztcbiAgICB0aGlzLmRlc2NyaWJlID1cbiAgICAgICdDb21tYW5kIHRvIGRlcGxveSBiYWNrZW5kcyBpbiBhIGN1c3RvbSBDSS9DRCBwaXBlbGluZS4gVGhpcyBjb21tYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGxvY2FsbHkuJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaGFuZGxlciA9IGFzeW5jIChcbiAgICBhcmdzOiBBcmd1bWVudHNDYW1lbENhc2U8UGlwZWxpbmVEZXBsb3lDb21tYW5kT3B0aW9ucz5cbiAgKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgaWYgKCF0aGlzLmlzQ2lFbnZpcm9ubWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSXQgbG9va3MgbGlrZSB0aGlzIGNvbW1hbmQgaXMgYmVpbmcgcnVuIG91dHNpZGUgb2YgYSBDSS9DRCB3b3JrZmxvdy4gVG8gZGVwbG95IGxvY2FsbHkgdXNlIGBhbXBsaWZ5IHNhbmRib3hgIGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBiYWNrZW5kSWQ6IEJhY2tlbmRJZGVudGlmaWVyID0ge1xuICAgICAgbmFtZXNwYWNlOiBhcmdzLmFwcElkLFxuICAgICAgbmFtZTogYXJncy5icmFuY2gsXG4gICAgICB0eXBlOiAnYnJhbmNoJyxcbiAgICB9O1xuICAgIGF3YWl0IHRoaXMuYmFja2VuZERlcGxveWVyLmRlcGxveShiYWNrZW5kSWQsIHtcbiAgICAgIHZhbGlkYXRlQXBwU291cmNlczogdHJ1ZSxcbiAgICB9KTtcbiAgICBhd2FpdCB0aGlzLmNsaWVudENvbmZpZ0dlbmVyYXRvci5nZW5lcmF0ZUNsaWVudENvbmZpZ1RvRmlsZShcbiAgICAgIGJhY2tlbmRJZCxcbiAgICAgIGFyZ3MuY29uZmlnVmVyc2lvbiBhcyBDbGllbnRDb25maWdWZXJzaW9uLFxuICAgICAgYXJncy5jb25maWdPdXREaXJcbiAgICApO1xuICB9O1xuXG4gIGJ1aWxkZXIgPSAoeWFyZ3M6IEFyZ3YpOiBBcmd2PFBpcGVsaW5lRGVwbG95Q29tbWFuZE9wdGlvbnM+ID0+IHtcbiAgICByZXR1cm4geWFyZ3NcbiAgICAgIC52ZXJzaW9uKGZhbHNlKVxuICAgICAgLm9wdGlvbignYnJhbmNoJywge1xuICAgICAgICBkZXNjcmliZTogJ05hbWUgb2YgdGhlIGdpdCBicmFuY2ggYmVpbmcgZGVwbG95ZWQnLFxuICAgICAgICBkZW1hbmRPcHRpb246IHRydWUsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbignYXBwLWlkJywge1xuICAgICAgICBkZXNjcmliZTogJ1RoZSBhcHAgaWQgb2YgdGhlIHRhcmdldCBBbXBsaWZ5IGFwcCcsXG4gICAgICAgIGRlbWFuZE9wdGlvbjogdHJ1ZSxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGFycmF5OiBmYWxzZSxcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKCdjb25maWctb3V0LWRpcicsIHtcbiAgICAgICAgZGVzY3JpYmU6XG4gICAgICAgICAgJ0EgcGF0aCB0byBkaXJlY3Rvcnkgd2hlcmUgY29uZmlnIGlzIHdyaXR0ZW4uIElmIG5vdCBwcm92aWRlZCBkZWZhdWx0cyB0byBjdXJyZW50IHByb2Nlc3Mgd29ya2luZyBkaXJlY3RvcnkuJyxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGFycmF5OiBmYWxzZSxcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKCdjb25maWctdmVyc2lvbicsIHtcbiAgICAgICAgZGVzY3JpYmU6XG4gICAgICAgICAgJ1ZlcnNpb24gb2YgdGhlIGNsaWVudCBjb25maWcuIFZlcnNpb24gMCByZXByZXNlbnRzIGNsYXNzaWMgYW1wbGlmeS1jbGkgY2xpZW50IGNvbmZpZyAoRGVmYXVsdCknLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgICBjaG9pY2VzOiBPYmplY3QudmFsdWVzKENsaWVudENvbmZpZ1ZlcnNpb25PcHRpb24pLFxuICAgICAgICBkZWZhdWx0OiBERUZBVUxUX0NMSUVOVF9DT05GSUdfVkVSU0lPTixcbiAgICAgIH0pO1xuICB9O1xufVxuIl19